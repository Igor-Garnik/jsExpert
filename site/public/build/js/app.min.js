(function () {
'use strict';

class Utils {
    constructor() {}

    static initTemplate(wrapper, template) {
        var clon = template.content.cloneNode(true);
        wrapper.innerHTML = '';
        wrapper.appendChild(clon);
    }

    static setActiveLink(elem, object) {
        object.forEach(item => {
            if (item == elem) {
                item.classList.add("active");
            } else {
                item.classList.remove("active");
            }
        });
    }

    static navigateTo(routeName) {
        window.location.hash = "#" + routeName;
    }

    static isLoggedIn() {
        let credentials = JSON.parse(localStorage.getItem('credentials'));
        return !!credentials;
    }
}

class LoginView {
    constructor() {
        this.domElements = {
            logInBtn: document.querySelector("#log-in-btn"),
            logOutBtn: document.querySelector("#log-out-btn"),

            logIn: document.querySelector("#inputEmail"),
            password: document.querySelector("#inputPassword")
        };
        this.linksElement = {
            home: document.querySelector(".home-state"),
            gallery: document.querySelector(".gallery-state"),
            profile: document.querySelector(".profile-state")
        };
    }

    showMsg(msg) {
        if (msg) {
            this.domElements.alert.classList.remove("hide");
            this.domElements.alert.innerHTML = msg;
        }
    }

    hideMsg() {
        this.domElements.alert.classList.add("hide");
    }

    showLinks() {
        this.linksElements.forEach(item => item.classList.remove("hide"));
    }

    hideLinks() {
        his.linksElements.forEach(item => item.classList.add("hide"));
    }

    getCredentials() {
        return {
            login: this.DOMElements.login.value,
            password: this.DOMElements.password.value
        };
    }
}

let wraper = document.querySelector("#wrapper");
let login = document.querySelector("#login-view");
let home = document.querySelector("#home-view");
let gallery = document.querySelector("#gallery-view");
let profile = document.querySelector("#profile-view");
let navBar = document.querySelector("#navbarResponsive");

let routeConfig = {
    "": () => {
        Utils.initTemplate(wrapper, login);
        let view = new LoginView();
    },
    "home": () => {
        Utils.initTemplate(wrapper, home);
    },
    "gallery": () => {
        Utils.initTemplate(wrapper, gallery);
    },
    "profile": () => {
        Utils.initTemplate(wrapper, profile);
    }
};

function activateRoute(routeName) {
    let route = routeConfig[routeName];
    route && route();
}

function updateRoute() {
    let routeName = document.location.hash.replace(/^#/, '');
    if (routeName) {
        Utils.navigateTo(routeName);
        activateRoute(routeName);
    } else {
        activateRoute(routeName);
    }
}

window.addEventListener('load', updateRoute);
window.addEventListener('hashchange', updateRoute);

}());

var router = (function (exports) {
'use strict';

class Utils {
    constructor() {}

    static initTemplate(wrapper, template) {
        var clon = template.content.cloneNode(true);
        wrapper.innerHTML = '';
        wrapper.appendChild(clon);
    }

    static setActiveLink(elem, object) {
        object.forEach(item => {
            if (item == elem) {
                item.classList.add("active");
            } else {
                item.classList.remove("active");
            }
        });
    }

    static navigateTo(routeName) {
        window.location.hash = "#" + routeName;
    }

    static isLoggedIn() {
        let credentials = JSON.parse(localStorage.getItem('credentials'));
        return !!credentials;
    }
}

class LoginView {
    constructor() {
        this.domElements = {
            logInBtn: document.querySelector("#log-in-btn"),
            logOutBtn: document.querySelector("#log-out-btn"),

            logIn: document.querySelector("#inputEmail"),
            password: document.querySelector("#inputPassword")
        };
        this.linksElement = {
            home: document.querySelector(".home-state"),
            gallery: document.querySelector(".gallery-state"),
            profile: document.querySelector(".profile-state")
        };
    }

    showMsg(msg) {
        if (msg) {
            this.domElements.alert.classList.remove("hide");
            this.domElements.alert.innerHTML = msg;
        }
    }

    hideMsg() {
        this.domElements.alert.classList.add("hide");
    }

    showLinks() {
        this.linksElements.forEach(item => item.classList.remove("hide"));
    }

    hideLinks() {
        his.linksElements.forEach(item => item.classList.add("hide"));
    }

    getCredentials() {
        return {
            login: this.DOMElements.login.value,
            password: this.DOMElements.password.value
        };
    }
}

let wraper = document.querySelector("#wrapper");
let login = document.querySelector("#login-view");
let home = document.querySelector("#home-view");
let gallery = document.querySelector("#gallery-view");
let profile = document.querySelector("#profile-view");
let navBar = document.querySelector("#navbarResponsive");

let routeConfig = {
    "": () => {
        Utils.initTemplate(wrapper, login);
        let view = new LoginView();
    },
    "home": () => {
        Utils.initTemplate(wrapper, home);
    },
    "gallery": () => {
        Utils.initTemplate(wrapper, gallery);
    },
    "profile": () => {
        Utils.initTemplate(wrapper, profile);
    }
};

function activateRoute(routeName) {
    let route = routeConfig[routeName];
    route && route();
}

function updateRoute() {
    let routeName = document.location.hash.replace(/^#/, '');
    if (routeName) {
        Utils.navigateTo(routeName);
        activateRoute(routeName);
    } else {
        activateRoute(routeName);
    }
}

exports.updateRoute = updateRoute;

return exports;

}({}));

var utils = (function () {
'use strict';

class Utils {
    constructor() {}

    static initTemplate(wrapper, template) {
        var clon = template.content.cloneNode(true);
        wrapper.innerHTML = '';
        wrapper.appendChild(clon);
    }

    static setActiveLink(elem, object) {
        object.forEach(item => {
            if (item == elem) {
                item.classList.add("active");
            } else {
                item.classList.remove("active");
            }
        });
    }

    static navigateTo(routeName) {
        window.location.hash = "#" + routeName;
    }

    static isLoggedIn() {
        let credentials = JSON.parse(localStorage.getItem('credentials'));
        return !!credentials;
    }
}

return Utils;

}());

var galleryController = (function () {
'use strict';

class GalleryController {
    controller(model, view, observer, utils) {
        this.model = model;
        this.view = view;
        this.observe = observer;
        this.utils = utils;
    }

}

return GalleryController;

}());

var galleryModel = (function () {
'use strict';

class GaleryModel {
    constructor() {
        this.url = "http://localhost:3000";
    }
    // getServerItem () {
    //     return fetch(this.url).then(response => response.json());
    //     .then(data => {
    //         console.log("Data loaded");
    //         return data
    //     })
    // }
}

return GaleryModel;

}());

var galleryView = (function () {
'use strict';

class GalleryView {
    constructor() {
        this.domElements = {};
    }
}

return GalleryView;

}());

var observer = (function () {
'use strict';

class Observer {
    constructor() {
        this.events = {};
    }

    subscribeEvent(name, func) {
        this.events[name] = func;
    }

    callEvent(name, arg) {
        if (this.events[name]) {
            this.events[name](arg);
        }
    }
}

return Observer;

}());

var homeController = (function () {
'use strict';

class HomeController {
    controller(model, view, observer, utils) {
        this.model = model;
        this.view = view;
        this.observe = observer;
        this.utils = utils;
    }
}

return HomeController;

}());

var homeModel = (function () {
'use strict';

class HomeModel {
    constructor() {
        this.url = "http://localhost:3000";
    }
    // getServerItem () {
    //     return fetch(this.url).then(response => response.json());
    //     .then(data => {
    //         console.log("Data loaded");
    //         return data
    //     })
    // }
}

return HomeModel;

}());

var homeView = (function () {
'use strict';

class HomeView {
    constructor() {
        this.domElements = {};
    }
}

return HomeView;

}());

var profileController = (function () {
'use strict';

class ProfileController {
    controller(model, view, observer, utils) {
        this.model = model;
        this.view = view;
        this.observe = observer;
        this.utils = utils;
    }
    bindEvents() {}
    fillInfoFields() {}
    init() {}
}

return ProfileController;

}());

var profileModel = (function () {
'use strict';

class GaleryModel {
    constructor() {
        this.url = "http://localhost:3000";
    }
    // getServerItem () {
    //     return fetch(this.url).then(response => response.json());
    //     .then(data => {
    //         console.log("Data loaded");
    //         return data
    //     })
    // }
}

return GaleryModel;

}());

var profileView = (function () {
'use strict';

class ProfileView {
    constructor() {
        this.domElements = {};
    }
}

return ProfileView;

}());

var loginController = (function () {
'use strict';

class LoginController {
    controller(model, view, observer, utils) {
        this.model = model;
        this.view = view;
        this.observe = observer;
        this.utils = utils;
    }

    initListeners() {
        this.view.domElements.logIn.addEventListeners("click", this.logInHandler.bind(this));
        this.view.domElements.logOut.addEventListeners("click", this.logOutHandler.bind(this));
        console.log("alert");
    }
    logInHandler(event) {

        event.preventDefault();
        console.log("hello");
        let credentials = this.view.getCradentials();
        if (this.model.validate(credentials)) {
            this.model.login(credentials).then(data => {
                if (data.loginStatus) {
                    this.view.hideMsg();
                    this.view.showLinks();
                    this.utils.navigateTo("gallery");
                } else {
                    this.view.showMsg(this.model.getErrorMsg());
                }
            });
        } else {
            this.view.showMsg(this.model.getErrorMsg());
        }
    }

    logoutHandler() {
        this.view.hideLinks();
        this.model.logout();
        this.utils.navigateTo("");
    }
}

return LoginController;

}());

var loginModel = (function () {
'use strict';

class LoginModel {
    constructor() {
        this.loginUrl = "http://localhost:3000/login";
        this.emailPattern = /^\w+@\w+\.\w{2,4}$/i;
        this.passwordPattern = /^[a-zA-Z0-9]{8,30}$/;
        this.errorMsg = null;
        this.errorMsgMap = {
            "empty": 'Пожалуйста заполните поля логин и пароль',
            "loginError": 'Логин введен неверно. Только латинские буквы.',
            "passError": 'Пароль введен неверно. Тольк латинские буквы, цифры. Длина не менее 8 символов',
            "missmatch": 'Неправильные логин или пароль.'
        };
    }

    validate(cradentials) {
        return isEmpty(cradentials) && isEmailAssertPattern(cradentials) && isPasswordAssertPattern(cradentials);
    }

    login(credentials) {
        let options = {
            headers: {
                'Content-type': 'application/json; charset=utf-8'
            },
            method: 'post',
            body: JSON.stringify(credentials)
        };
        return fetch(this.loginUrl, options).then(responce => responce.json()).then(data => {
            if (data.loginStatus) {
                localStorage.setItem('credentials', JSON.stringify(credentials));
            } else {
                this.setErrorMsg("missmatch");
            }
            return data;
        });
    }

    getErrorMsg() {
        return this.errorMsg;
    }

    setErrorMsg(key) {
        this.errorMsg = this.errorMsgMap[key];
        return false;
    }

    isEmpty(credentials) {
        return credentials.login && credentials.password || this.setErrorMsg("empty");
    }

    isEmailAssertPattern(credentials) {
        return this.emailPattern.test(credentials.login) || this.setErrorMsg("loginError");
    }

    isPasswordAssertPattern(credentials) {
        return this.passwordPattern.test(credentials.password) || this.setErrorMsg("passError");
    }

    logout() {
        localStorage.removeItem('credentials');
    }
}

return LoginModel;

}());

var loginView = (function () {
'use strict';

class LoginView {
    constructor() {
        this.domElements = {
            logInBtn: document.querySelector("#log-in-btn"),
            logOutBtn: document.querySelector("#log-out-btn"),

            logIn: document.querySelector("#inputEmail"),
            password: document.querySelector("#inputPassword")
        };
        this.linksElement = {
            home: document.querySelector(".home-state"),
            gallery: document.querySelector(".gallery-state"),
            profile: document.querySelector(".profile-state")
        };
    }

    showMsg(msg) {
        if (msg) {
            this.domElements.alert.classList.remove("hide");
            this.domElements.alert.innerHTML = msg;
        }
    }

    hideMsg() {
        this.domElements.alert.classList.add("hide");
    }

    showLinks() {
        this.linksElements.forEach(item => item.classList.remove("hide"));
    }

    hideLinks() {
        his.linksElements.forEach(item => item.classList.add("hide"));
    }

    getCredentials() {
        return {
            login: this.DOMElements.login.value,
            password: this.DOMElements.password.value
        };
    }
}

return LoginView;

}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,
