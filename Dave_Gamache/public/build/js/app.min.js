!function(){"use strict";class e{constructor(){}static initTemplate(e,t){let i=document.querySelector(`#${t}`).content.cloneNode(!0);e.innerHTML="",e.appendChild(i)}static setActiveLink(e,t){t.forEach(t=>{t==e?t.classList.add("active"):t.classList.remove("active")})}static navigateTo(e){window.location.hash="#"+e}static isLoggedIn(){return!!JSON.parse(localStorage.getItem("credentials"))}}document.querySelector("#wrapper");let t={"":()=>{e.initTemplate(wrapper,"login-view");new class{constructor(){this.domElements={logInBtn:document.querySelector("#log-in-btn"),logOutBtn:document.querySelector("#log-out-btn"),logIn:document.querySelector("#inputEmail"),password:document.querySelector("#inputPassword")},this.linksElement={home:document.querySelector(".home-state"),gallery:document.querySelector(".gallery-state"),profile:document.querySelector(".profile-state")}}showMsg(e){e&&(this.domElements.alert.classList.remove("hide"),this.domElements.alert.innerHTML=e)}hideMsg(){this.domElements.alert.classList.add("hide")}showLinks(){this.linksElements.forEach(e=>e.classList.remove("hide"))}hideLinks(){his.linksElements.forEach(e=>e.classList.add("hide"))}getCredentials(){return{login:this.DOMElements.login.value,password:this.DOMElements.password.value}}}},home:()=>{e.initTemplate(wrapper,"home-view")},gallery:()=>{e.initTemplate(wrapper,"gallery-view")},profile:()=>{e.initTemplate(wrapper,"profile-view")}};function i(e){let i=t[e];i&&i()}function s(){let t=document.location.hash.replace(/^#/,"");t?(e.navigateTo(t),i(t)):i(t)}window.addEventListener("load",s),window.addEventListener("hashchange",s)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
